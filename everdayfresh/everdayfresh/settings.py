"""
Django settings for everdayfresh project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

sys.path.insert(0,os.path.join(BASE_DIR,'apps'))
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'pu+&&a7*eq_9$1de50@i+qa(5mn=5j4q!r(2hcqq9g3o29=vll'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'haystack',#注册全文检索框架
    'tinymce',#富文本编辑器
    'user',  #用户模块
    'goods',
    'cart',
    'order',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'everdayfresh.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'everdayfresh.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'everydayfresh',
        'USER':'root',
        'PASSWORD':'mysql',
        'HOST':'192.168.9.128',
        'PORT':3306,
    }
}
#django 认证系统使用的模型类，作用替换自带的auto_user表，使创建user表的时候，
# 是用自己创建的表
AUTH_USER_MODEL='user.User'

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS =[os.path.join(BASE_DIR,'static')]
#指定手机静态文件到目录下
STATIC_ROOT='/var/www/everydayfresh/static'
#富文本编辑器配置
TINYMCE_DEFAULT_CONFIG={
    'theme':'advanced',
    'width':600,
    'height':400,
}
#发送邮件配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST='smtp.qq.com'
EMAIL_PORT =25
EMAIL_HOST_USER ='997909695@qq.com'
#在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD='geyxrbwoffitbehi'
#收件人看到的发件人
EMAIL_FROM ='python<997909695@qq.com>'
#django的缓存配置
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://192.168.9.128:6379/9",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}
#配置session的存储
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
#配置登录地址
LOGIN_URL='/user/login'

#设置Django的文件存储类
DEFAULT_FILE_STORAGE='utils.fdfs.storage.FDFSStorage'

#设置fdfs使用的client.conf文件路径
FDFS_CLIENT_CONF='./utils/fdfs/client.conf'
#设置fsfs存储服务器上ngix的IP和端口号
FDFS_URL='http://192.168.9.128:8888/'

#全文检索框架的配置
HAYSTACK_CONNECTIONS ={
    'default':{
        #使用whoose引擎
        # 'ENGINE':'haystack.backends.whoosh_backend.WhooshEngine',
        'ENGINE':'haystack.backends.whoosh_cn_backend.WhooshEngine',
        #索引文件路径
        'PATH':os.path.join(BASE_DIR,'whoosh_index'),
    }
}
#当添加/修改/删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR='haystack.signals.RealtimeSignalProcessor'
#指定搜索结果每页显示的条数
HAYSTACK_SEARCH_RESULTS_PER_PAGE=2